name: Build IOCTL Kernel Anti-Anti-Debug Driver

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  BUILD_CONFIGURATION: Release
  SOLUTION_FILE_PATH: "IOCTL Cheat Driver.sln"

jobs:
  build:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1.3
      
    - name: Setup Windows SDK
      uses: GuillaumeFalourd/setup-windows10-sdk-action@v1.11
      with:
        sdk-version: 26100
        
    - name: Setup Windows Driver Kit (WDK)
      run: |
        # Download and install WDK
        Invoke-WebRequest -Uri "https://go.microsoft.com/fwlink/?linkid=2249371" -OutFile "wdksetup.exe"
        Start-Process -FilePath "wdksetup.exe" -ArgumentList "/quiet" -Wait
        
    - name: Cache NuGet packages
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/*.vcxproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
          
    - name: Restore NuGet packages
      run: nuget restore "${{ env.SOLUTION_FILE_PATH }}"
      
    - name: Build Solution
      run: |
        msbuild /m /p:Configuration=${{ env.BUILD_CONFIGURATION }} /p:Platform=x64 "${{ env.SOLUTION_FILE_PATH }}"
        
    - name: Upload Kernel Driver Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: kernel-driver-${{ env.BUILD_CONFIGURATION }}
        path: |
          x64/build/*.sys
          x64/build/*.inf
          x64/build/*.cat
          
    - name: Upload User Mode Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: usermode-app-${{ env.BUILD_CONFIGURATION }}
        path: |
          x64/build/*.exe
          x64/build/*.dll
          x64/build/*.pdb
          
    - name: Run Tests (if available)
      run: |
        # Add test commands here when tests are implemented
        echo "No tests configured yet"
        
  security-scan:
    runs-on: windows-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v2
      with:
        languages: cpp
        
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1.3
      
    - name: Build for Analysis
      run: |
        msbuild /m /p:Configuration=${{ env.BUILD_CONFIGURATION }} /p:Platform=x64 "${{ env.SOLUTION_FILE_PATH }}"
        
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  package:
    runs-on: windows-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download Kernel Driver Artifacts
      uses: actions/download-artifact@v4
      with:
        name: kernel-driver-${{ env.BUILD_CONFIGURATION }}
        path: ./artifacts/kernel/
        
    - name: Download User Mode Artifacts
      uses: actions/download-artifact@v4
      with:
        name: usermode-app-${{ env.BUILD_CONFIGURATION }}
        path: ./artifacts/usermode/
        
    - name: Create Release Package
      run: |
        # Create release directory structure
        New-Item -ItemType Directory -Force -Path "release"
        New-Item -ItemType Directory -Force -Path "release/kernel"
        New-Item -ItemType Directory -Force -Path "release/usermode"
        New-Item -ItemType Directory -Force -Path "release/tools"
        New-Item -ItemType Directory -Force -Path "release/docs"
        
        # Copy artifacts
        Copy-Item "artifacts/kernel/*" "release/kernel/" -Recurse
        Copy-Item "artifacts/usermode/*" "release/usermode/" -Recurse
        
        # Copy documentation
        Copy-Item "README.md" "release/docs/"
        Copy-Item "README_ADVANCED.md" "release/docs/"
        Copy-Item "KERNEL_DRIVER_COMPLETE.md" "release/docs/"
        Copy-Item "KDMAPPER_INTEGRATION.md" "release/docs/"
        
        # Copy batch scripts
        Copy-Item "start_advanced_debug_manager.bat" "release/"
        Copy-Item "stop_driver.bat" "release/"
        
        # Copy config template
        Copy-Item "config_example.ini" "release/"
        
    - name: Create ZIP Archive
      run: |
        Compress-Archive -Path "release/*" -DestinationPath "IOCTL-Kernel-Anti-Anti-Debug-Driver-${{ github.sha }}.zip"
        
    - name: Upload Release Package
      uses: actions/upload-artifact@v4
      with:
        name: release-package
        path: "IOCTL-Kernel-Anti-Anti-Debug-Driver-${{ github.sha }}.zip"
        
    - name: Create Release (on tag)
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: "IOCTL-Kernel-Anti-Anti-Debug-Driver-${{ github.sha }}.zip"
        body: |
          ## IOCTL Kernel Anti-Anti-Debug Driver Release
          
          ### Features
          - Advanced kernel-mode anti-anti-debug driver
          - User-mode management application with GUI
          - Process hiding and protection capabilities
          - Network traffic interception via MITM proxy
          - Automatic kdmapper integration
          - x64dbg debugging integration
          
          ### Installation
          1. Extract the archive
          2. Run `start_advanced_debug_manager.bat` as Administrator
          3. Follow the setup instructions in the documentation
          
          ### Documentation
          - See `docs/README_ADVANCED.md` for detailed usage instructions
          - See `docs/KERNEL_DRIVER_COMPLETE.md` for technical details
          - See `docs/KDMAPPER_INTEGRATION.md` for kdmapper setup
          
          **⚠️ Warning**: This tool is for educational and authorized testing purposes only.
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
